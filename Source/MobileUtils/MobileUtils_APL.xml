<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Mobile Utils Plugin
    Created by Patryk Stepniewski
    Copyright (c) 2014-2016 gameDNA studio. All Rights Reserved.
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <init>
	<log text="MobileUtils init"/>
  </init>

  <proguardAdditions>
    <insert>
	</insert>
  </proguardAdditions>

  <prebuildCopies>
	<copyDir src="$S(PluginDir)/../../ThirdPartyLibraries/Android"
					dst="$S(BuildDir)" />

  </prebuildCopies>
  <AARImports>
	<insertValue value="repositories $S(EngineDir)/Source/ThirdParty/Android/extras/google"/>
	<insertNewline/>
	<insert>com.google.android.gms,play-services-location,9.2.0</insert>
	<insertNewline/>
	<insert>com.google.android.gms,play-services-auth-base,9.2.0</insert>
       	<insert>com.google.android.gms,play-services-auth,9.2.0</insert>
</AARImports>

  <gameActivityImportAdditions>
	<insert>
	  import android.net.ConnectivityManager;
	  import android.net.NetworkInfo;
	  import com.google.android.gms.common.ConnectionResult;
	  import android.telephony.TelephonyManager;
	  import android.provider.Settings.Secure;
	  import android.net.wifi.WifiManager;
	  import java.security.MessageDigest;
	  import java.security.NoSuchAlgorithmException;
          import android.location.Location;
          import com.google.android.gms.location.LocationServices;
          import com.google.android.gms.location.LocationRequest;
          import com.google.android.gms.location.LocationListener;
          import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
          import com.google.android.gms.auth.api.signin.GoogleSignInResult;
          import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
          import com.google.android.gms.auth.api.Auth;
          import com.google.android.gms.common.api.OptionalPendingResult;
         import com.google.android.gms.common.Scopes;
         import com.google.android.gms.common.api.Scope;
         import com.google.android.gms.common.AccountPicker;
         import android.accounts.AccountManager;
          import android.util.Log;
	</insert>
  </gameActivityImportAdditions>

  <androidManifestUpdates>
    <trace enable="true"/>
     <addElements tag="application">
       <activity
           xmlns:android="http://schemas.android.com/apk/res/android"
           android:name="com.google.android.gms.auth.api.signin.internal.SignInHubActivity"
           android:screenOrientation="landscape"
           android:windowSoftInputMode="stateAlwaysHidden|adjustPan"
           />
     </addElements>

     <addPermission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
     <addPermission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     
     <trace enable="false"/>

  </androidManifestUpdates>

  <resourceCopies>
      <copyDir src="$S(PluginDir)/../Java/src" dst="$S(BuildDir)/src"/>
   </resourceCopies>

  <gameActivityOnStartAdditions>
    <insert>
      mobileUtilsHandler.start();
    </insert>
 </gameActivityOnStartAdditions>              

 <gameActivityOnStopAdditions>
    <insert>
      mobileUtilsHandler.stop();
    </insert>
 </gameActivityOnStopAdditions>
 <gameActivityOnActivityResultAdditions>
   <insert>
          handleSignInActivityResult(requestCode, data);
   </insert>
 </gameActivityOnActivityResultAdditions>

  <gameActivityClassAdditions>
    <insert>
   /****/

      mobileutils.cameratexture.CameraTexture cameraTexture;
      boolean cameraTextureNeedsAllocation = true;

      public void AndroidThunkJava_StartCamera() {
        if (cameraTexture == null) {
          cameraTexture = new mobileutils.cameratexture.CameraTexture();
        }
        try {
          cameraTexture.start();
        } catch (IOException exc) {
          mobileUtilsDebug(exc.getMessage());
        }
      }
      public void AndroidThunkJava_StopCamera() {
        if (cameraTexture != null) {
          cameraTexture.stop();
          cameraTextureNeedsAllocation = true;
        }
      }

      public boolean AndroidThunkJava_UpdateCameraTexture(int destTexture) {
        if (cameraTexture != null) {
           boolean result = cameraTexture.render(destTexture, cameraTextureNeedsAllocation);
           if (result) {
             cameraTextureNeedsAllocation = false;
           }
           return result;
        }
        return false;
      }

      public int AndroidThunkJava_GetCameraWidth() {
         return cameraTexture != null ? cameraTexture.getWidth() : 0;
      }
      public int AndroidThunkJava_GetCameraHeight() {
        return cameraTexture != null ? cameraTexture.getHeight() : 0;
      }
         

      static void mobileUtilsDebug(String msg) {
         android.util.Log.v("MobileUtils", msg);
      }
      class MobileUtilsHandler implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener {
        private GoogleApiClient mobileUtilsApiClient;
        private Location currentLocation;
  
        private boolean locationUpdatesRequested;
        LocationRequest req;

        public GoogleApiClient GetGoogleApiClient() { return mobileUtilsApiClient; }   
        boolean isConnected() {
           return mobileUtilsApiClient != null &amp;&amp; mobileUtilsApiClient.isConnected();
        }
        public void start() {
        if (mobileUtilsApiClient == null) {
        final GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestScopes(new Scope(Scopes.PLUS_LOGIN))
            .requestScopes(new Scope(Scopes.PLUS_ME))
            .requestEmail()
           .build();

           mobileUtilsApiClient = new GoogleApiClient.Builder(GameActivity.this)
              .addConnectionCallbacks(this)
              .addOnConnectionFailedListener(this)
              .addApi(LocationServices.API)
              .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
              .build();
          }
          mobileUtilsApiClient.connect();
        }


          
        public void stop() {
          mobileUtilsApiClient.disconnect();
        }
        public void stopLocationUpdates() {
          if (locationUpdatesRequested) {
            if (isConnected()) {
              LocationServices.FusedLocationApi.removeLocationUpdates(mobileUtilsApiClient, this);
            }
            locationUpdatesRequested = false;
           }
           req = null; 
        }
        public void startLocationUpdates(int interval) {
          stopLocationUpdates();
          req = LocationRequest.create();
          req.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
          req.setInterval(interval);
          applyLocationUpdatesRequest();
        }
        private void applyLocationUpdatesRequest() {   
          if (req == null) return;
          if (isConnected()) {
            LocationServices.FusedLocationApi.requestLocationUpdates(
            mobileUtilsApiClient, req, this, android.os.Looper.getMainLooper());
            req = null;
            locationUpdatesRequested = true;
          }
        }
        @Override
        public void onLocationChanged(Location location) {
          currentLocation = location;
        }
          
        @Override
        public void onConnected(Bundle connectionHint) {
          mobileUtilsDebug("connected to Google play service");
        }
        @Override
        public void onConnectionSuspended(int cause) {
          mobileUtilsDebug("connection to Google play service suspended: "+cause);
        }
        @Override
        public void onConnectionFailed(ConnectionResult result) {
          mobileUtilsDebug("connection to Google play service failed:" + result);
        }
        public Location getCurrent() {
            applyLocationUpdatesRequest();
            return currentLocation;
         }
      }
      final MobileUtilsHandler mobileUtilsHandler = new MobileUtilsHandler();

      public void AndroidThunkJava_StartLocationUpdates(int intervalMillis)
      {
         mobileUtilsHandler.startLocationUpdates(intervalMillis);
      }

      public void AndroidThunkJava_StopLocationUpdates()
      {
         mobileUtilsHandler.stopLocationUpdates();
      }

      static public Class GetGoogleSignInAccountClass() { return GoogleSignInAccount.class; } // hack
         
      final int RC_SIGN_IN = 91147;
      final int RC_CHOOSE_ACCT = 81147;
      Intent signInIntent;
      GoogleSignInAccount googleSignInAccount;
      Intent chooseAccountIntent;
      String accountName;
      public Object AndroidThunkJava_GetGoogleSignInAccount()
      {
         if (chooseAccountIntent == null) {
            chooseAccountIntent = AccountPicker.newChooseAccountIntent(null, null, new String[]{"com.google"},
         false, "to use for Dreamworld", null, null, null);
            startActivityForResult(chooseAccountIntent, RC_CHOOSE_ACCT);
         }
         return accountName;   
      }
      
      
      GoogleSignInAccount doGoogleSignIn() // doesn't work
      {
         if (signInIntent == null) {
           GoogleApiClient client = mobileUtilsHandler.GetGoogleApiClient();

           if(client != null &amp;&amp; client.isConnected())
           {
              OptionalPendingResult&lt;GoogleSignInResult&gt; opr =
               Auth.GoogleSignInApi.silentSignIn(client);
               if (opr.isDone()) {
                  googleSignInAccount = opr.get().getSignInAccount();
                  mobileUtilsDebug("Google sign in account obtained silently");
               } else {
                   mobileUtilsDebug("Google sign in activity started");
                                    
                   signInIntent = Auth.GoogleSignInApi.getSignInIntent(client);
                   startActivityForResult(signInIntent, RC_SIGN_IN);
               }
           }
         }
         return googleSignInAccount;
      }

         

      void handleSignInActivityResult(int requestCode, Intent data)
      {
          if (requestCode == RC_SIGN_IN)
          {
              GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
              if (result != null &amp;&amp; result.isSuccess()) {
                 googleSignInAccount = result.getSignInAccount();
                 mobileUtilsDebug("Google sign in succeeded: "+googleSignInAccount);
              }
              else
              {
                 mobileUtilsDebug("Google sign in failed: "+(result != null ? result.getStatus() : "null"));
              }
          }
          else if (requestCode == RC_CHOOSE_ACCT)
          {
             if (data != null) {
                accountName = data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
             } else {
                accountName = "";
             }
             mobileUtilsDebug("Google choose account: "+accountName);
          }
              
              
      }


      public boolean AndroidThunkJava_GetCurrentLocation(double[] coordinates) {
        if (coordinates == null || coordinates.length != 4) return false;
        Location loc = mobileUtilsHandler.getCurrent();
        if (loc == null) return false;
        coordinates[0] = loc.getLatitude();
        coordinates[1] = loc.getLongitude();
        coordinates[2] = loc.getAltitude();
        coordinates[3] = loc.getAccuracy();
        return true;
      }


	public boolean AndroidThunkJava_CheckInternetConnection() 
	{
		ConnectivityManager connectivity = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		if (connectivity != null)
		{
			NetworkInfo[] info = connectivity.getAllNetworkInfo();
			if (info != null)
			{
				for (int i = 0; i &lt; info.length; i++)
				{
					if (info[i].getState() == NetworkInfo.State.CONNECTED)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	public boolean AndroidThunkJava_CheckGooglePlayServices() 
	{
		int status = GooglePlayServicesUtil.isGooglePlayServicesAvailable(getBaseContext());
		if(status == ConnectionResult.SUCCESS) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}
	
	public String AndroidThunkJava_GetPersistentUniqueDeviceId() 
	{
		TelephonyManager TelephonyMgr = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
		String IMEI = TelephonyMgr.getDeviceId(); 
		
		String FakeDeviceID = "35" + 
								Build.BOARD.length() % 10+ Build.BRAND.length() % 10 + 
        						Build.CPU_ABI.length() % 10 + Build.DEVICE.length() % 10 + 
        						Build.DISPLAY.length() % 10 + Build.HOST.length() % 10 + 
        						Build.ID.length() % 10 + Build.MANUFACTURER.length() % 10 + 
        						Build.MODEL.length() % 10 + Build.PRODUCT.length() % 10 + 
        						Build.TAGS.length() % 10 + Build.TYPE.length() % 10 + 
        						Build.USER.length() % 10 ; 
 
		String AndroidID = Secure.getString(getContentResolver(), Secure.ANDROID_ID); 

		WifiManager wm = (WifiManager)getSystemService(Context.WIFI_SERVICE);	  
		String MACAddress = wm.getConnectionInfo().getMacAddress();
	
		String LongDeviceID = IMEI + FakeDeviceID + AndroidID + MACAddress;

		MessageDigest m = null;
		try 
		{
			m = MessageDigest.getInstance("MD5");
		} 
		catch (NoSuchAlgorithmException e) 
		{
			e.printStackTrace();
		} 
		m.update(LongDeviceID.getBytes(), 0, LongDeviceID.length());
		byte MD5Data[] = m.digest();

		String UniqueID = new String();
		for (int i = 0; i &lt; MD5Data.length; i++) 
		{
			int b =  (0xFF &amp; MD5Data[i]);
			if (b &lt;= 0xF) 
			{
			  UniqueID += "0";
			}
			UniqueID += Integer.toHexString(b); 
		}

		UniqueID = UniqueID.toUpperCase();
		
		return UniqueID;
	}
	</insert>
  </gameActivityClassAdditions>
</root>
